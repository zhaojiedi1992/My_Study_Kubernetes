pod概述
===================

pod是可以创建和管理Kubernetes计算的最小可部署单元。pod表示为集群上正在运行的进程。 

pod内部封装一个应用程序容器，存储资源，一个唯一的网络ip以及控制容器应该如何运行的选项。 

pod都有一个唯一的ip地址，内部的容器采用localhost通信。

pod可以共享一组存储卷，可以使用应用容器展示卷数据，另外一个容器作为应用容器的sidecar来从远端拉取数据来填充卷，完成应用容器的数据更新工作。 

低于1.1的版本的k8s无法运行特权pod


pod删除流程
----------------------------

1. 用户发送删除pod的命令，默认宽限期为30s。
2. apiserver标记pod为中断，并设置宽限期。
3. 客户端命令列出的时候显示为已终止， 
   kubelet发现pod标记为种植，根据宽限期开始pod的关闭工作，如果定义了preStop钩子，则在pod中调用他，pod进程发送term信号。 
   pod从端点列表中删除已进行维护，从服务中移除pod的流量。
4. 宽限期到期后，pod中运行的进程会被kill信号杀死。 
5. kubelet通过设置宽限期为0(立即删除)完成删除apiserver中的pod。 pod彻底删除。 

pod的状态
-------------------------------

- Pending: pod被k8s接受，需要等待中。
- Running： pod已经绑定到节点，并且创建完毕所有的容器，至少一个容器是运行的，或者正在启动或者重新启动。
- Succeeded: pod中的所有容器都已经成功种植，并且不会重新启动了。  
- Failed:    pod所有容器都已经终止，并且至少有一个容器终止失败，可能容器非0状态退出，要么被系统终止。 
- Unknown:  无法获取pod的状态信息， 通常是由于与pod的主机通信出错了。 

pod探针
------------------------------------
容器探针有2种， 处理程序有三种。 

处理程序

- ExecAction: 在容器中执行特定的命令，如果退出码为0则表示成功。 
- TCPSocketAction: 对特定容器的ip地址执行tcp检查，如果端口打开则成功。 
- HTTPGetAction: 对特定端口和路径的容器ip地址执行http get 请求，如果响应码介于200-400认为成功。 

探针

- livenessProbe: 存活性探测， 如果探测失败，kubelet会杀死容器，如果未提供活动探测，默认为success。
- readinessProbe: 就绪性探测， 容器启动后，特定的服务不会马上就就绪， 这个探测成功表示容器特定服务就绪了。如果未提供活动探测，默认为success。 

什么时候使用存活性探测和就绪性探测
---------------------------------------

- 存活性探测： 防止容器遇到问题自行崩溃了时候使用， 需要配合restartPolicy=Always或者restartPolicy=OnFailure。
- 就绪性探测： 在配合server工作的时候，只有特定的服务就绪的时候才接入流量进入pod。
             容器启动期间需要处理大型数据，配置文件，或者迁移。

pod重启策略
-------------------------
pod的重启策略有3个

- Always
- OnFailure
- Never 

kubelet重新启动的已退出容器将以指数退避延迟（10秒，20秒，40秒......）重新启动，上限为五分钟，并在成功执行十分钟后重置。
一旦绑定到节点，Pod将永远不会被反弹到另一个节点。

pod生命周期
-------------------------------

一般来说pod不会自动消失， 知道有人主动摧毁它（例外： terminated-pod-gc-threshold 这个参数来控制pod运行时长，超过的pod会过期并自动销毁)。

有三种控制器可以选择。 

- Job类的，用于批量计算的， 作业仅适用于 restartPolicy等于OnFailure或Never的Pod。
- replicationController,ReplicaSet或者Deployment，用与不希望终止的pod的。 ReplicationControllers仅适用于具有restartPolicyAlways的Pod。
- DaemonSet,希望每个节点启动的服务。 

pod对节点故障没有弹性，但是控制器对节点有弹性的。


初始容器
---------------------------------------
它是应用程序容器之前运行的专用容器,可以在容器启动之前执行， 可以有多个初始化容器， 按照顺序执行。 

初始化容器和常规容器的差异： 

- 初始化容器支持应用容器的所有字段和功能， 包括资源限制，卷和安全设置， 但是初始化容器的资源请求和限制的处理方式有点不同。 
- 初始化容器不支持就绪探针。 
- 多个初始化容器是顺序执行的， 第一个初始化容器成功了才开始初始化下一个容器。 而应用容器是并行运行的。 

在1.6之前， 初始化容器需要使用metadata.annotations.pod.beta.kubernetes.io/init-containers指定，之后的版本可以直接在spec指定，也就是和containers并列级别的。 


更改初始化镜像的镜像字段，相当于重新启动了pod。


pod预设置
-------------------------------------

PodPresets是在创建pod的时候将特定信息注入pod的对象，信息可以报考secret,pv,pvc,env等。 

禁用pod预设： 注解添加： podpreset.admission.kubernetes.io/exclude: "true"

